Domains services
-------

ProductService
	- find(int id) [find product by id]
	- findAllProducts(String city, int distance) [find all products available in a city]
	- findAllProductsByBrand(String city, Brand brand, int distance) [find all available product in a city of a particular brand]
	- findAllProductBySeller(string city, Person seller) [find all product available on a particular seller]
	- findAllProductsOnDeal(string city, int distance) [find all products on deal]
	- save(string city, Product product) [save a product]
	- update(String city, Product product) [update a product]
	- delete(int id) [delete a product]
	
	
PersonService
	- find(int id) [find a person]
	- findAllSeller(String city, int distance) [find all sellers in city]
	- findAllSellerWhoDeliver(String city, int distance) [find all sellers in city]
	- findAllSellerWithActiveDeals(String city, int distance) [find all sellers providing deals presently]
	- findAllSellersByProduct(String city, Product product, int distance) [find all sellers who are selling a particular product]
	- findAllConsumerBySearchedProduct(String city, Product product, int distance) [find all people who searched for a particular product]
	- findAllTopRatedSellers(String city, int distance) [find 10 top rated sellers]
	- findSellersWithMaximumDeals() [find top 10 sellers with maximum deals]
	- findMostNoticedSeller() [find top 10 sellers whose deals were mostly viewed]
	- register(Person person) [save a person] {Note: there should be different way of adding a seller vs adding a consumer}
	- update(Person person) [update a person]
	- delete(int id) [delete a person]
	
OfferService
	- find(int id)
	- findAllOffersByProduct(String city, int distance, Product product) [find all offers of a product in city`]
	- findAllOffersBySeller(String city, int distance, Person seller ) [find offers given by a particular seller]
	- findAllOffersBySellerWhoDeliver(String city, int distance, Person seller ) [find all offers from a seller who provide delivery]
	- findMostPopularOffers(String city, int distance) [find top 5 most viewed offers]
	- addOffer(String city, Offer offer) [add an offer]
	- updateOffer(String city, Offer offer) [update an offer]
	- deleteOffer(String city, Offer offer) [delere an offer]
		
ReviewService
	- find(int id)
	- findAllReceivedReviews(string city, Person person)
	- findAllGivenReviews(String city, Person person)
	- addReview(String city, Review review)
	- updateReview(String city, Review review)
	- deleteReview(int id)
	
AccountService
	- find(int id) [find an account]
	- findAll() [find accounts of user]
	- addAccount(DealAccount dealAccount)
	- updateAccount(DealAccount dealAccount)
	- deleteAccount(int id)
	
DealService
	- find(int id) [find a deal package]
	- findAll(String city) [find all available deal packages in a city]
	- addDeal(String city, Person seller)
	- updateDeal(String city, Person seller)
	- deleteDeal(int id)
	
	
Add authentication using Oauth2
Implement caching using either approaches: ETag and Last-Modified
Implement rate limiting : 429 Too Many Requests - When a request is rejected due to rate limiting
Implement pagination
Use a fields query parameter that takes a comma separated list of fields to include. (ET /tickets?fields=id,subject,customer_name,updated_at&state=open&sort=-updated_at)
use ElasticSearch or another Lucene based search technology
If possible implement errors like as follows
{
  "code" : 1024,
  "message" : "Validation Failed",
  "errors" : [
    {
      "code" : 5432,
      "field" : "first_name",
      "message" : "First name cannot have fancy characters"
    },
    {
       "code" : 5622,
       "field" : "password",
       "message" : "Password cannot be blank"
    }
  ]
}

Use HTTPS and TLS
use jwt\jwe
https://github.com/jwtk/jjwt
https://www.youtube.com/watch?v=oXxbB5kv9OA

API key authentication using Oauth: 

POST /token http/1.1
Content-Type: application/x-www-form-urlencoded
grant_type=Client_credentials&client_id=apiKeyId&client_secret=apiKeySecret
https://www.youtube.com/watch?v=DX0TFtoRCOE
http://github.com/rcandidosilva/rest-oauth2-sample


----------------------
Futuristic enhancement 
----------------------
1. Let Seller hunt for buyer, ie a functioanility when user (potential buyer) publish a requirement in real time manner and that requirement becomes available to 
sellers. Then seller starts bidding and whose bid is minimum wins. The system role is to publish such requirements available for sellers to pick and then to 
present bids to buyer on the basis of seller's reputation and track record.   


------------------------------------------------------------------------------------------------------------------------
findings from videos
--------------------------------------------------------------------------------------------------------------------------

Observations from (REST-Ful API Design by spring developer) https://www.youtube.com/watch?v=oG2rotiGr90
================================================================

Repository interface should throw application specific exception

one way to inject repository in resource
private final GameRepository repo, then in constructor autowired

409 conflict : an operation which is not possible from application point of view


Get
----
	1. Must be safe and idempotent
	2. Can be conditional or partial
		If-Modified-Since
		Range


DELETE
------
	1. The resource doesn't have to be removed immediately


POST
-----
	1. Can be used to create or modify


media-Type
application/json+foo;application&v=1
 
use iso8601 for date

id's should be opaque

request header values comma delimited in order of preference

Accept: application/json, text/plain

Implemented a way to tell sever in what way you want data back like google does by specifying json in req

have a req paramater to tell server if you dont want body

fields req param

no of res returned controlled by req param

response shoul be more descriptive

authorize based on resource not url

http authentication scheme investigate

use api key

use BCrypt

api key encrypted using message authentication code

ID good candidates UUID Url64

